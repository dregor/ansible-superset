# the pip version of superset to deploy
superset_version: 0.34.0

# installation options
superset_install_from_git: false
superset_git_url: https://github.com/apache/incubator-superset.git
superset_package_name: apache-superset
superset_start_command: run
superset_additional_options: --with-threads

# the python executable to install superset using
superset_python_executable: "python3.6"

# the application secret key
superset_secret_key: REPLACE\2\1thisismyscretkey\1\2\e\y\y\h

# available languages
superset_languages:
    - key: en
      flag: us
      name: English
    - key: it
      flag: it
      name: Italian
    - key: fr
      flag: fr
      name: French
    - key: zh
      flag: cn
      name: Chinese
    - key: ja
      flag: jp
      name: Japanese

# web UI details
superset_username: admin
superset_firstname: Superset
superset_lastname: Admin
superset_email: techops+superset@ona.io
superset_pass: REPLACEaVnwiLmc489m13

# web application configuration
superset_recreate_virtualenv: False
superset_app: superset
superset_flask_secret_key: REPLACEalhD4LIU4Ssn6
superset_port: 8888
superset_workers: 2
superset_mapbox_api_key: REPLACE
superset_load_examples: true
superset_allowed_extensions:
  - csv

# database credentials
superset_db_type: postgres
superset_db_host: localhost
superset_db_port: 5432
superset_db_name: superset
superset_db_user: superset
superset_db_pass: REPLACEHS&y7834yKDSd

# whether to check if the superset service is running
superset_check_if_running: True

# whether to restart superset after making changes; default is True, for a cluster you may wish to disable
superset_perform_restart: True

# whether to force a restart, useful if another role has made changes (such as updating a custom nar); default is False
superset_force_restart: False

# authentication configuration
superset_auth_type: AUTH_DB
superset_oauth_providers:
superset_service_env_vars:
# allow user self registration
superset_auth_user_registration: False
# default role when user self registers
superset_auth_user_registration_role: Public
# set public role like gamma
superset_public_role_like_gamma: False

# white labelling
superset_white_label: False
superset_white_label_use_base64: False
superset_white_label_use_filepaths: False

# base64 encoded superset branding images
superset_favicon_base64:
superset_logo_base64:
superset_2x_logo_base64:

# file paths to superset branding images
superset_favicon_path:
superset_logo_path:
superset_2x_logo_path:
superset_app_name: "Superset"
# Set to true if you'd want the role to login to PostgreSQL using the provided
# credentials instead as using the default authentication mechanism (sudo'ing to
# the prostgres user)
superset_postgres_login: true
superset_db_login_user: "postgres"
superset_db_login_password: ""

# upload directories
superset_upload_dir: "{{ superset_home }}/uploads/"
superset_img_upload_dir: "{{ superset_home }}/images/"

# config path
superset_config_module_path: "{{ superset_python_path }}/superset_config.py"

# Allow for javascript controls components
# this enables programmers to customize certain charts (like the
# geospatial ones) by inputing javascript in controls. This exposes
# an XSS security vulnerability
superset_enable_javascript_controls: False

# cors
superset_enable_cors: False
# CORS options
# needs to be set as a Python dictionary, like so:
# superset_cors_options: |
#   {
#      "origins": "*",
#      "methods": "GET",
#      "allow_headers": "Custom-Api-Token",
#      "supports_credentials": True
#   }
superset_cors_options:

# HTTP headers
# needs to be set as a Python dictionary, like so:
# superset_http_headers: |
#   {
#     'X-Frame-Options': 'SAMEORIGIN'
#   }
superset_http_headers:

# Extract and use X-Forwarded-For/X-Forwarded-Proto headers?
superset_enable_proxy_fix: False

# additional python packages installed after Superset is installed
superset_additional_pip_packages: []
superset_install_additional_pip_packages: False

# superset patchup (ketchup)
superset_use_ketchup: False
superset_ketchup_git_url: "https://github.com/onaio/superset-patchup.git"
superset_ketchup_version: "master"

# Add custom superset roles
superset_add_custom_roles: False
# This needs to be a Python dictionary defined like so:
# superset_custom_roles: |
#   {
#     'Custom_Role_1': {'all_datasource_access'},
#     'Custom_Role_2': {'all_datasource_access', 'SQL Lab'},
#     'ROLE_NAME': {'PERMISSION1', 'PERMISSION2'}
#   }
superset_custom_roles:

# PATCHUP_EMAIL_BASE
# this is used for OAuth providers whose users do not have an email address
# superset requires an email address and so we need to provide it
# the email base should be a string e.g. superset@example.com
# we then use it to construct email addresses for the user logging in
# that look like superset+username@example.com (if the base was as set above)
superset_patchup_email_base:

# Configure superset caching
superset_enable_cache: False
superset_cache_config: |
  {
    'CACHE_TYPE': 'redis',
    'CACHE_KEY_PREFIX': 'superset_results',
    'CACHE_REDIS_URL': 'redis://localhost:6379/0'
  }
superset_cache_default_timeout: 60 * 60 * 24, # 1 day

# Configure superset celery task cache warmup
superset_enable_celerybeat: False
superset_celerybeat_schedule: |
  {
    'cache-warmup-hourly': {
      'task': 'cache-warmup',
      'schedule': crontab(minute=0, hour='*'),  # hourly
      'kwargs': {
          'strategy_name': 'top_n_dashboards',
          'top_n': 5,
          'since': '7 days ago',
      },
    },
  }

superset_pip_dependencies_packages: ["setuptools", "psycopg2-binary", "mysql", "Flask-OAuthlib", "crontab", "redis"]

# Roles created by superset
superset_robot_permission_roles: ['Public', 'Gamma', 'Alpha', 'Admin', 'sql_lab']

# Configure superset dashboard position json data limit
superset_dashboard_position_data_limit: 65535

superset_virtualenv_path: "{{ superset_home }}/.virtualenvs/{{ superset_user }}"
superset_python_path: "{{ superset_virtualenv_path }}/lib/{{ superset_python_executable }}"

# Timeouts
superset_sqllab_timeout: 180
superset_webserver_timeout: 180
superset_sqllab_async_time_limit_sec: 180